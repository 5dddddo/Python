## pandas는 python data 분석의 핵심 module(package)
## 데이터 분석
## 1. EDA ( 탐색적 데이터 분석 ) : 예) Excel로 데이터 분석
##    python 언어로 pandas를 이용해서 EDA 수행
## 2. 통계적 데이터 분석 : 통계학 이론을 이용한 분석
## 3. 머신러닝 : 기존 데이터를 이용해서 프로그램을 학습
##    (딥러닝)   이 학습된 결과를 이용해 예측


## Pandas는 고유한 자료구조를 2개 사용하는데
## Series : numpy의 1차원 배열과 상당히 유사
##          동일한 데이터 타입의 복수 개의 요소로 구성
## DataFrame : table 형식으로 구성된 자료구조
##             2차원 배열과 상당히 유사
##             데이터 베이스 테이블과 상당히 유사

import numpy as np
import pandas as pd
import pymysql.cursors

print("=" * 30)
arr = np.array([-1,10,50,99],dtype=np.float64)
print(arr)
print("=" * 30)

s = pd.Series([-1,10,50,99],dtype=np.float64)
display(s)
print(s.values)  # numpy 1차원 array로 리턴
print(s.index)
print(s.dtype)

# index를 문자로 쓸 수 있음
s = pd.Series([-1,10,50,99], index =['c','a','k','tt'])
display(s)

# 다른 형식의 인덱스를 사용할 수 있음
print(s['a'])     # 10
print(s[1])       # 10
print(s['a':'k']) # 문자로 slicing 가능 => 둘 다 포함함
                  # slicing 범위 조심!
print(s[1:3])     # 일반적인 slicing 사용 가능
print(s.sum())

## A 공장의 2019-01-01부터 10일간 제품 생산량을 Series에 저장
## 단, 생산량의 평균은 50이고 표준편차는 5인 정규분포에서
## 생산량을 랜덤하게 결정

## B 공장의 2019-01-01부터 10일간 제품 생산량을 Series에 저장
## 단, 생산량의 평균은 70이고 표준편차는 8인 정규분포에서
## 생산량을 랜덤하게 결정

## 2019-01-01부터 10일 간 모든 공장(A,B)의 생산량을 날짜별로 구하기
# 날짜 연산을 위한 import
from datetime import date,timedelta
# 문자열을 date type으로 parsing하기 위해 import
from dateutil.parser import parse

start_day = parse("2019-01-01")
factory_a = pd.Series([int(x) for x in np.random.normal(50,5,(10,))],
                      index = [start_day + timedelta(days=x) for x in range(10)])
print(factory_a)
factory_b = pd.Series([int(x) for x in np.random.normal(70,8,(10,))],
                      index = [start_day + timedelta(days=x) for x in range(10)])

print(factory_b)


# Series의 덧셈 연산은 같은 index끼리 수행
print(factory_a+factory_b)

##이전에는 series라는 자료구조를 만들때 python의
## list를 이용해서 만들었는데 이번에는
## dictionary를 이용

my_dict = {"서울":3000,"부산":2000,"제주":1000}
s = pd.Series(my_dict)
s.name = "지역별 가격 데이터"
s.index.name = "지역"
display(s)

# pandas의 두번째 자류구조는 DataFrame을 살펴보아요
## 거의 대부분의 경우 DataFrame을 이용해서 데이터 분석
## dictionary를 이용해서 생성

data = {"name": ["kim","lee","park","moon","kim"],
        "year":[2015,2016,2019,2019,2015],
        "point" : [3.1,4.3,1.2,2.3,3.9] }

df = pd.DataFrame(data)
display(df)

print("DataFrame의 shape : {}".format(df.shape))
print("DataFrame의 요소 개수 : {}".format(df.size))
print("DataFrame의 차원 : {}".format(df.ndim))
print("DataFrame의 인덱스 : {}".format(df.index))
print("DataFrame의 컬럼 : {}".format(df.columns))
print("DataFrame의 데이터 : {}".format(df.values))

## CSV 파일을 이용해서 DataFrame 생성
## 일반적으로 CSV 파일의 첫번째 행은 컬럼을 명시

df = pd.read_csv("./data/MovieLens/ratings.csv")
#display(df)

# 상위 5개
display(df.head())

# 하위 5개
display(df.tail())

## Database로부터 데이터를 얻어내서 DataFrame을 생성
## mysql을 이용해서 처리해 보아요!
## python에서 mysql을 사용할 수 있도록 도와주는
## module을 설치

## mysql을 다운로드 받아서 간단하게 설치-설정
## 데이터베이스를 연결하기 위한 변수를 하나 생성
conn = pymysql.connect(host="localhost",
                      user="python",
                      password="python",
                      db="library",
                      charset="utf8")
sql = "select bisbn,btitle,bauthor,bprice from books"
df = pd.read_sql(sql,con=conn)
display(df)

# 3가지 형태의 데이터 파일을이용
# CSV 파일을 읽어들여서 PANDAS의 DataFrame으로 표현

df = pd.read_csv("./data/MovieLens/ratings.csv")
# display(df)
# dataframe에 들어있는 데이터를 json으로 저장하고 싶음
# new_df = df.head()
# display(new_df)
df.to_json("./data/MovieLens/ratings.json")

## JSON 파일을 읽어서 DataFrame을 만들어 보아요
file = open("./data/MovieLens/ratings.json")
my_dict = json.load(file)
file.close()
df = pd.DataFrame(my_dict)
## index가 문자열 기반으로 정렬되어 1들이 2보다 앞에 나옴
display(df)

## pandas의 dataframe의 제어

data = {"이름": ["홍길동","강감찬","이순신","신사임당"],
        "학과": ["컴퓨터","경영","철학","미술"],
        "학년":[1,3,2,4],
        "학점":[3.1,2.9,4.5,3.9]
       }

df = pd.DataFrame(data,
                 columns=["학과","이름","학년","학점"],
                 index = ["one","two","three","four"])
display(df)
## dataframe은 기본적인 분석함수 제공
display(df.describe())

import warnings

# warning을 출려하지 않기 위한 설정
# warnings.filterwarnings(action="ignore") ## off
warnings.filterwarnings(action="default") ## on


data = {"이름": ["홍길동","강감찬","이순신","신사임당"],
        "학과": ["컴퓨터","경영","철학","미술"],
        "학년":[1,3,2,4],
        "학점":[3.1,2.9,4.5,3.9]
       }

df = pd.DataFrame(data,
                 columns=["학과","이름","학년","학점"],
                 index = ["one","two","three","four"])
#display(df)
## Dataframe에서 특정 col만 추출
## col 1개만 들고오면 Series
display(type(df["이름"]))
year=df["학년"] # year => Series => view로 가져옴
                # view가 아닌 복사본을 이용하려면 copy()
year[0]= 100
display(year)

## col 2개 이상 추출하려면
# display(df["이름","학년"])  ## Error

## Fancy indexing 이용 => 배열 리스트로 추출
## 인덱싱하는 부분에 인덱스 배열을 이용하는 indexing 방법
#display(df[["학과","이름"]])  ## dataframe이 추출돼요

# 컬럽 값 수정 
df["학년"] = np.array([1,2,2,1])
df["학년"] = 3


df["나이"] = pd.Series([20,21,23,25])
#display(df)

# 위에서 인덱스를 one,...,four 로 지정해서
# default index인 1,2,3,4로 안 들어감
# 인덱스 지정해줘야함

df["나이"] = pd.Series([20,21,23,25],index = ["one","two","three","four"])
#display(df)

df["장학금여부"]= df["학점"]>3.0
display(df)

# del df["학점"]; # 학점 컬럼 삭제, 실제 사용 X

## 컬럼 삭제한ㄴ 일반적인 방법
# axis = 열방향인지 행방향인지
# inplace = 원본에서 제거할지 여부
#         = True : 원본 삭제시 return X 
#         = False : 원본에서 삭제하지 말고 복사본 만들어서 return
df.drop("학점",axis=1,inplace = True)
#display(df)


################################################
# dataFrame의 컬ㄹ럼을 제어하기 위한 CRUD 방법 #
################################################

## row indexing
#display(df)
#display(df[0])     ## index 번호로 row 선택할 수 없음 => 
                    ## df[" ~~~ "]  => 이건 col 지정 방식
#display(df["one"]) ## 이 방식은 컬럼을 지정할때 쓰는 방식이어서 error
                    ## index 번호로 특정 row를 선택하는건 안돼요!
                    ## 슬라이싱은 가능, 슬라이싱 결과는 dataframe
        
# display(df[0:1])
# display(df[:-1])
# display(df["one":"three"])

# 일반적으로 행을 제어할때
# df.loc[0]  # 0번째 행을 indexing 하려는 의도지만 사용할 수 없음 => error

# 숫자 index말고 사용자가 문자 index로 지정한 경우에는 사용 가능
# 1개의 행을 선택하는 것이기 때문에 Series로 return
df.loc["one"]
print(df.loc[["one","three"]]) # fancy indexing


# 컬럼은 []으로 row는 loc()로 제어
# loc 사용 시 컬럼에 대한 indexing도 할 수 있음
display(df.loc["one":"three", ["이름","학년"]]) # slicing해서 행 가져오고
                                                # fancy indexing해서 열 가져옴

    
# 새로운 행을 추가하려면
df.loc["five",:] = ["물리","유관순",2,3,4]
display(df)

## row를 삭제하려면
df.drop(["one","three"],axis=0,inplace=True)
display(df)

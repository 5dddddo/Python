import numpy as np
# resize()
arr = np.arange(0,12,1)
arr1= np.resize(arr,(2,6))

print(arr)
print(arr1)

arr[0] = 100

print(arr)
print(arr1)

arr = np.arange(10,20,1)

for idx, item in enumerate(arr):
    print("index : {0}, data : {1}".format(idx,item))

    
# python의 slicing은 그 범위를 메모리에 복사해서 올림    
# numpy array의 slicing은 view를 생성해서 데이터 공유
result = arr[0:3]    
print(result)

arr =np.arange(0,12,1)
arr1 = arr[0:3]
arr1 = arr[0::2]
print(arr1)

# 2차원 형태의 numpy array
arr = np.arange(0,16,1).reshape(4,-1).copy()
print(arr)
print(arr[1,2])    #  6
print(arr[1,:])    #  [4 5 6 7]
print(arr[:2,3:])  # [[3]]
                   #  [7]]

# boolean indexing
# : indexing하려는 numpy array(원본)와 사이즈가 같은
#   boolean mask를 만들어서 이를 이용해 indexing을 하는 기법

# 정수 형태의 랜덤값을 추출해서 1차원의 numpy array를 생성
np.random.seed(10) # 랜덤값의 재연을 위해 시드값 고정
arr = np.random.randint(0,10,(10,))
print(arr)

print(arr%2)

# boolean mask : 위치 index를 알려주는 것이 아니라 true가 어디 있는지를 알려주는 mask
print(arr%2==0)
print(arr[arr%2==0])

# indexing
# numpy array를 하나 생성해 보아요
# python의 range와 같이 길이 특정 구간에 있는 연속적인
# 데이터를 이용해서 numpy array를 만드는 경우
arr = np.arange(0,10,1)
print(arr)
print(arr[0]) # indexing

# slicing
# python의 list에 대한 slicing은 특정 구간에 대한
# numpy array의 slicing은 View를 생성
# 원본과 데이터를 공유하고 shape이 다른 ndarray를 생성

#print(arr[0:3])

# boolean indexing
# boolean mask를 이용해서 indexing하는 방식
arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
print(arr)

# numpy array 에 대해 수학적 연산(+,-,*,/,%,..)을
# 수행하려면 두 개의 numpy array가 같은 shape를 가져야 
# 만약 shape이 다르면 broadcasting을 통해 shape를 맞춤
# arr_1 = np.array([[10,20,30],[40,50,60],[70,80,90]])

# broadcasting : 형태가 맞지 않아도 계산 가능하게 확장
arr_1 = np.array([10,20,30])
print(arr+arr_1)

arr_1 = 5
print(arr+arr_1)


# boolean indexing
#print(arr%2 == 0) # boolean mask 생성
#print(arr[arr%2==0]) # boolean indexing

# Fancy indexing
# numpy array에 index 배열을 이용해서 배열 요소를 참조하는 방법
# 랜덤값을 이용해서 numpy array를 생성
# 정수형 난수를 생성

np.random.seed(13)
arr = np.random.randint(0,10,(5,5))
print(arr)

print(arr[1,1]) # 일반적인 indexing
print(arr[1,:]) # 일반적인 indexing + slicing
print(arr[1,:3]) # 일반적인 indexing + slicing 
print(arr[1,[0,2,4]]) # Fancy indexing : 1,0 / 1,2 / 1,4 요소

arr_1 = np.array([[1,2],[3,4],[5,6]])  # 3 x 2
arr_2 = np.array([[1,2,3],[4,5,6]])    # 2 x 3

# 내적 연산 : 두 array의 형태가 맞아야 함
print(np.matmul(arr_1,arr_2))

# numpy array가 제공하는 함수
np.random.seed(0)
arr=np.random.randint(0,10,(3,4))
# print(arr)

# 합계 구하기
print(arr.sum())
print(np.sum(arr)) 

# 평균 구하기
print(arr.mean())

# 최댓값
print(arr.max())

# 최솟값
print(arr.min())

# 표준편차
print(arr.std())

# 제곱근
print(np.sqrt(arr))

# 축 (axis)
# 1차원의 numpy array가 생성
arr1 = np.array([1,2,3,4,5])

# 위의 함수를 사용할 때 axis 를 명시하지 않으면 axis= None 으로 설정
# numpy array 전체에 대해 함수를 적용
# axis = 0 => 열 방향, 가로 방향

# 1차원 array에서는 axis = 0 or axis = None만 사용 가능
# print(arr1.sum(axis = 0)) # 15
# print(arr1.sum(axis = None)) # 15

# 2차원 array 생성
# axis = 0 => 행 방향, 세로 방향, 결과값 : 행 갯수만큼 출력
# axis = 1 => 열 방향, 가로 방향, 결과값 : 열 갯수만큼 출력
arr = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])
print(arr)
print(arr.sum(axis = None)) # 78 -> 전체 요소의 합
print(arr.sum(axis = 0)) 
print(arr.sum(axis = 1)) 

# 3차원 array 생성
# axis = 0 => depth 방향
# axis = 1 => 행 방향, 세로 방향 
# axis = 2 => 열 방향, 가로 방향

arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])
print(arr)
print(arr.sum(axis =1)) 

# 집계함수의 처리속도 (sum)
arr = np.arange(10000000)

%%time
result = 0;
for i in arr:
    result += i
print(result)

%%time
print(arr.sum())

# 중복 요소 제거
arr = np.array([1,2,3,1,2,3])
print(np.unique(arr))

#MovieLens 데이터 파일을 이용
#Group Lens에서 수집한 영화에 대한 평점 데이터
#영화에 대한 선호도를 1점~5점까지로 표현

# 데이터 전달 포맷
# CSV(Comma Seperated Value)
# 부가적인 데이터가 많지 않아서 대용량의 데이터를 표현할 때 사용
# MovieLens Data 파일 분석

# 1. 데이터 로딩 ( CSV 파일로부터 데이터 읽기)
data = np.loadtxt("data/MovieLens/ratings.csv", delimiter= ",", dtype = np.int32)

# 2. 상위 5개의 행만 출력
print(data[:5,:])

# 모든 영화에 대한 전체 평균 평점
mean_rate = data[:,2].mean()
print(mean_rate)
print(data.shape)

# 각 사용자별 평균 평점
# for i in data[]
for i in np.unique(data[:,1]):
    data[i,]

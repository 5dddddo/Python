### logistic regression -> titanic 예제

import tensorflow as tf
import warnings
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
warnings.filterwarnings(action="ignore")

df = pd.read_csv("./data/titanic/train.csv")
data = df[["Survived","Pclass","Sex","Age","Fare"]]
data.dropna(how ="any",inplace=True)

data.loc[data["Sex"]=="male","Sex"] = 1
data.loc[data["Sex"]=="female","Sex"] = 2
data["Age"] = data["Age"]//10
data["Fare"] = data["Fare"] // 1

df_x = data.drop("Survived",axis = 1,inplace=False)
df_y = data["Survived"]

x_data = MinMaxScaler().fit_transform(df_x.values)
y_data = MinMaxScaler().fit_transform(df_y.values.reshape(-1,1))

# placeholder 
X = tf.placeholder(shape = [None,4],dtype = tf.float32)
Y = tf.placeholder(shape = [None,1],dtype = tf.float32)

# weight & bias
W = tf.Variable(tf.random_normal([4,1]),name = "weight")
b = tf.Variable(tf.random_normal([1]),name = "bias")

# Hypothesis
logits = tf.matmul(X,W)+b
# 지수 함수 형태의 H 정의
H = tf.sigmoid(logits)

# cost function
cost = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=logits,labels=Y))

# training node 생성
train = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)

# session & 초기화
sess = tf.Session()
sess.run(tf.global_variables_initializer())

# 학습
for step in range(3000):
    _, cost_val = sess.run([train,cost],feed_dict = {X:x_data,Y:y_data})
    if step % 300 == 0:
        print(cost_val)
        
## Accuracy
# H > 0.5 == 1 : True / H <= 0.5 == 0 : False
predict = tf.cast(H>0.5,dtype=tf.float32)    

## correct node
correct = tf.equal(predict,Y)
accuracy = tf.reduce_mean(tf.cast(correct,dtype=tf.float32))
print("정확도 : {}".format(sess.run(accuracy,feed_dict = {X:x_data,Y:y_data})))

df = pd.read_csv("./data/titanic/test.csv")
test = df[["Pclass","Sex","Age","Fare"]]
test.dropna(how ="any",inplace=True)

test.loc[test["Sex"]=="male","Sex"] = 1
test.loc[test["Sex"]=="female","Sex"] = 2
test["Age"] = test["Age"]//10
test["Fare"] = test["Fare"] // 1
x_test = MinMaxScaler().fit_transform(test.values)

 print(sess.run(tf.cast(sess.run(H, feed_dict = {X:x_test}) > 0.5,dtype = tf.int32)))

